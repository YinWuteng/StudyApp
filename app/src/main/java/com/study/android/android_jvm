运行时数据区域（程序计数器、java虚拟机栈、本地方法栈、java堆、方法区、运行常量池、直接内存）：
Java虚拟机在执行Java程序的过程中会把所有管理的内存划分为若干个不同的数据区域。
有的区域随着虚拟机进程的启动而存在，有的区域则以来用户的启动和结束而建立和销毁。
程序计数器：
程序计数器是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。
java虚拟机栈
java虚拟机栈也是线程私有的，Java虚拟机栈描述的是java方法执行的内存模型
本地方法栈
为虚拟机使用到的Native方法服务，
java堆
java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。是垃圾收集器管理的主要区域。
方法区
是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量即使编译器编译后的代码等数据。

对象是否死亡？
引用计数算法：
给对象添加一个引用计数器，每当有地方引用它时，计数器就加1，引用失效时，计数器就减1
java虚拟机没有应用是因为它很难解决对象之间循环引用的问题。
可达性分析算法:
通过一系列的称为GC Roots的对象作为起始点，从这些几点开始向下搜索，搜索所走过的路径称为引用链，当一个对象到GC Roots没有任何引用链相连，
则证明次对象是不可用，所以他们将会被判定为是可回收的对象。
垃圾收集算法：
1.标记清除算法，首先标记出所有需要回收的对象，在标记完成后同意回收所有被标记的对象。
   不足：效率问题，标记和清除两个过程的效率都不高，另一个是空间问题，标记和清除之后会产生大量不连续的内存碎片。
2.复制算法：解决效率问题
  它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块，当这一块内存用完了，就将还存活
   着的对象复制到另外一块上面，然后再不已经使用过的内存空间一次清理掉。费内存
3.标记-整理算法
  标记过程仍然与标记清除算法一样，但后续不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动。然后直接清理掉端边界以外的内存。
4.分代收集算法
  一般把java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。
  在新生代中，每次垃圾手机都发现有大批对象死去，只有少量存货，那就选用复制算法，在老年代中则使用标记-清理或者标记-整理算法。

  垃圾收集器
java虚拟机规范中对垃圾收集器应该如何实现并没有任何规定，根据不同厂商、不同版本垃圾收集器都可能会有很大差别。
Serial收集器是最基本、发展历史最悠久的收集器。单线程版本，收集时会停止所有任务
ParNew收集器 Serial的多线程版本
G1
组件化：将APP分为多个模块，开发过程中，我们可以让这些组件相互依赖或者单独调试部分组件，最终发布时统一成 一个APK
插件化：将APP分为多个模块，这些模块包括一个宿主和多个插件，每个模块都是一个apk(组件化的每个模块是lib)，最终打包的时候将宿主
        apk和插件apk分开或者联合打包。
动态替换方案
静态代理方案：
热修复技术、RN
Binder的目的是解决跨进程通信，分为Client和Server两个进程，IPC为进程进通信，ServiceManger负责把BinderServer注册到一个容器中，
AMS
ActivityMangerService，四大组件的启动和后续流程都是在AMS中来来回回地通信，
APP启动
Launcher通知AMS要启动APP的哪个页面
AMS通知Launcher知道了，并把要启动的首页标记下来
Launcher当前页面进入Paused状态，然后通知AMS
AMS根据记录的值，开启动APP的哪个页面
组件化和模块化 的本质思想是一样的，都是为了代码重用和业务解耦，区别在于模块化是业务导向，组件化是功能导向。

JNI流程
1.在Java中声明native方法
2.编译Java源文件得到class文件，然后通过javah命令导出JNI的头文件
3.实现JNI方法
4.编译so库并在java中调用

如何顺序执行线程
1，使用join方法，这个方法的作用是，让当前线程等待，直到调用join放大的线程池结束运行。
2.使用单线程池，ExecutorService。

Android中为什么主线程不会因为Looper.loop()里面的死循环卡死？
Android应用程序的主线程进入消息循环前，会在内部创建一个linux管道，这个管道的作用是使得Android
应用程序主线程在消息队列为空时可以进入空闲等待状态，并且使得当应用程序的消息队列有消息需要处理时
唤醒应用程序的主线程。
https://www.jianshu.com/p/fd82d18994ce

android中自定义控件属性
1.在res/values文件中添加attrs.xmml文件并设置属性类型、属性值。
2.在自定义控件的类中拿到attrs.xml文件中定义的属性及对应的值，然后赋值给我们需要设置的变量
3.在布局文件中使用自定义属性，并设置属性值。

android混淆
哪些不需要混淆：
1.反射中使用的元素
2.Jni接口和java的native方法
3.数据模型
4.抽象内部类
5.四大组件
6.使用第三方开源库或者引用其他第三方的SDK包
7.枚举
8.注解
9.js调用java的方法
10.Parcelable的子类和Creator静态成员变量
在debug模式下开启混淆，可以方便验证
一颗星表示只是保持改包下的类名，而子包下的类名还是会被混淆，
两颗星表示把本包和所含子包下的类名都保持，
保留一个类中的内部类不被混淆则需要用$符号

https简单来说就是http的安全版，即Http下加入SSL层，
