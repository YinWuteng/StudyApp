1.常用的数据结构有哪些
  数组、栈、队列、链表、树、堆、图、散列表。


2.列举java的集合以及集合之间的继承关系
   Collection：一个独立元素的序列，这些元素都服从一条或多条规则
   List必须按照插入的顺序保存元素，
   Set不能有重复的元素
   Quene按照排列规则来确定对象尝试的顺序(通常与它们被插入的顺序相同)，
   Map 一组成对的“键对值”，允许你用键来查找值
   ArrayList：它鲳鱼随机访问元素，但是在List的中间插入和删除元素较慢
   LinkedList 它通过代价较低的List中间进行的插入和删除操作，提供了优化的顺序访问
   ，但在随机访问方面相对较慢
   HashSet 使用的是散列寒素，TreeSet将元素存储在红-黑树数据结构中，
   LinkedHashList也是用了散列代码优化。
3.并发集合了解哪些
  并发list，并发set，并发map，并发queue，并发的deuue.
4.集合类以及集合框架
  集合类主要分为两大类Collection和Map。
5.List,Set,Map的区别、实现方式以及存储方式
  List和Set都继承自Collection接口，Map不是。
  List特点：元素有放入顺序，
  Set特点：元素无放入顺序，元素不可重复，重复元素会覆盖，
  List和Set对比，
  Set检索元素效率低下。删除和插入效率高，删除和插入不会引起元素位置变化，
  List:和数组类似，List可以动态增长，查找元素效率高，插入删除元素效率低，因为会引起其他元素位置变化。
  Map适合存储键值对。
  线程安全集合类和非线程安全集合类：
  LinkedList、ArrayList、HashSet、HashMap、StringBuilder是非线程安全。
  Vector、HashTable、StringBuffer是线程安全。
  List接口对Collection进行了简单的扩充，它的具体实现类有ArrayList和LinkedList。ArrayList他是一种类似于数组的形式进行存储，因此它的随机访问速度极快。而LinkedList的实现是链表，它适合在链表中间需要频繁进行插入和删除操作。
  Set也是Collection的一种扩展，与List不同，Set中的对象元素不能重复。常用的实现由HashSet和TreeSet,HashSet能快速定位一个元素，TreeSet则将放入其中的元素按序存放。
  Map是一种把键对象和值对象进行关联的容器，而一个值对象又可以是一个Map,依次类推，这样就可形成一个多级映射。常用的实现由HaspMap和TreeMap,HashMap可以快速查找到一个键，TreeMap则是对键按序存放。
6.HaspMap的实现原理、数据结构、源码理解、如何put数据，实现手写HashMap.
  HashMap是基于哈希表的Map接口的非同步实现，此实现提供所有可选的映射操作。并允许使用null值和null键。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。HaspMap实际是一个“链表散列”的数据结构，即数组和链表的结合体。
  当我们往HashMap中put数据时，先根据key的hashcode重新计算hash值。根据hash值得到这个元素在数组中的位置（即下标），如果数组该位置上已经存放有其它元素了，那么在这个位置上的元素将以链表的形式存放，新加入的放在链头，最先加入的放在链尾，如果数组该位置上没有元素，则直接将该元素放到此数组中的该位置上。
  HashMap在底层将key-value当成一个整体进行处理，这个整体就是一个Entry对象，HashMap底层采用一个Entry[]数组来保存所有的key-value对，当需要存储一个Entry对象时。会根据hash算法来决定其在数组中的存储位置，在根据equals方法决定其在该数组位置上的链表中的存储位置，当需要提出一个Entry时，也会根据Hash算法找到其在数组中的存储位置，在根据equals方法从该位置上的链表中取出该Entry.

7.ArrayMap和HashMap的对比
  HashMap内部是使用一个默认容量为16的数组来存储数据的，当容量不足时，会不断扩充容量，所以对内存消耗较大。当数据量较小时可以使用，数据量较大时，很容易引发OOM。
  ArrayMap采用了一种独特的方式。能够反复利用数据扩容遗留下来的数组空间，方便下一个ArrayMap的使用。因为查找方法是二分法，并且当你删除或者添加数据时，会对控件重新调整。在使用大量数据时，效率较低。所以在手机APP上，适时的使用ArrayMap，会给内存使用带来可观的提升。
8.HashTable实现原理
  HashTable和HashMap一样，HashTable也是一个散列表，它存储的内容是键值对映射。HashTable继承与Dictionary，实现了Map,Cloneable，Serializable接口。HashTable的函数都是同步的，这意味着它的线程是安全的。它的key和value都不可以为null，此外HashTable的映射不是有序的。
  HashSet就是精简版的HashMap，HashSet并不是key value结构，仅仅是存储不重复的元素。
  HashSet的内部实现都是HashMap，只不过HashSet里面的value都是同一个object.
  HashMap是非synchronized的。
9.TreeMap实现
  TreeMap的实现是红黑树算法的实现。继承自AbstractMap是一个有序的key-value集合，实现NavigableMap接口，意味着它支持一系列的导航方法，实现Cloneable接口，意味着他能被克隆，实现Serializable接口，意味着它支持序列化。
  红黑树顾名思义就是节点是红色或者黑色的平衡二叉树，它通过颜色的约束来维持着二叉树的平衡。必须遵循如下规则：每个节点都只能是红色或者黑色，根节点是黑色，每个叶节点是黑色，如果一个节点是红色。则它的两个子节点都是黑的，也就是说在一条路径上不能出现相邻的两个红色节点，从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点。
10.ArrayList、Verctor、LinkedList的区别，以及应用场景
  ArrayList是基于数组实现的，它允许对元素进行快速的随机访问，对数组进行复制、移动代价比较高，因此它适合随机查找和遍历，不适合插入和删除。
  Vertor也是通过数组实现。不同的是它支持线程的同步，即某一时刻只有一个线程能够写Vector，避免多线程同时写而引起的不一致性，但实现同步需要很高的花费，所有访问它比访问ArrayList慢。
  LinkList实用链表结构存储数据的，很适合数据的动态插入和删除，随机访问对象和遍历速度很慢。另外它还提供了List接口中没有定义的方法，专门用于操作表头和表尾元素，可以当做堆栈、队列和双向队列使用。
11.HashSet、TreeSet、LinkedHashSet
  HashSet的性能基本上总是比TreeSet好，特别是在添加和查询元素时，TreeSet存在的唯一原因是它可以维持元素的排序状态。因为其内部结构支持排序，并且因为迭代是我们更有可能执行的操作，所以TreeSet迭代通常比用HashSet要快，
  插入操作时，LinkedHashSet比HashSet的代价更高。这是维护链表的开销造成的。
12.数组和链表的区别
  在内存中，数组是一块连续的区域，各元素必须连续，而链表不要求连续。
  数组需要预留空间，早使用前需要先申请内存，可能会浪费内存空间。数组的插入数据和删除数据效率低，但是随机读取效率高，因为数组是连续的，知道每一个数据的内存地址，可以直接找到给地址的数据。但是比例与扩展，数组定义的空间不够时需要重新定义数组。
  链表在内存中不要求连续，每一个数据都保存了下一个数据的内存地址，增加数据和删除数据很容易，因为不具有随即访问性，所以查找效率低，但是不需要指定大小，扩展方便。
13.数组、堆栈、链表、队列的区别
  数组：数组是最基本的数据结构，数组是使用一块连续的内存空间保存数据，
  使用时需要先申请一块内存。
  链表：链表时在非连续的内存单元中保存数据，并通过指针将各个内存单元连
  接在一起，最后一个节点的指针指向null。链表不需要提前分配固定大
  小存储空间；
  堆栈：实现了一种后进先出的语义，可以使用数组或者时链表来实现
  队列：实现了一种先入先出的语义，队列也可以使用数组和链表来实现，队列
  只允许在队尾添加数据，在队头删除数据，但是可以查看队头和队尾的
  数据，还有一种是双端对列，在两端都可以插入和删除。
14.二叉树的深度优先遍历和广度优先遍历的具体实现
  深度优先搜索是沿着树的深度遍历树的节点，尽可能深的搜索树的分支。
  广度优先搜索是从根节点开始沿着树的宽度搜索遍历。
15.堆的结构
  堆是利用完全二叉树的结构来维护一组数据，一般操作进行一次的时间复杂度在O1至Ologn之间。
16.堆和树的区别
  二叉树是为了实现动态查找而设计的数据结构，他是面向对象查找操作的，在二叉树排序中查找到一个节点的平均时间复杂度是Ologn。
  堆是为了实现排序而设计的一种数据结构，他不是面向查找操作的，因而在队中查找一个几点需要进行遍历，其平均时间复杂度是On
17.堆和栈在内存中的区别是什么
  申请方式和回收方式不同：系统会自动的在栈上为其开辟空间，而堆则是程序员根据需要自己申请的空间。
  申请后系统的响应：只要栈的剩余空间大于所申请的空间，系统将为程序提供内存，否则将报异常提示栈溢出。
  而堆首先应该知道操作系统有一个记录空闲内存地址的链表，当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆。
  申请效率：栈由系统自动分配，速度较快。堆是由程序员自己new，一般速度比较慢，容易产生碎片。
  申请大小：栈的大小通常为一个固定值，而堆的大小受限于计算机系统中有效的虚拟内存。
18.深度拷贝和浅拷贝
   浅拷贝：指源对象与拷贝对象共用一份实体，仅仅是引用的变量不同，对其中任何一个对象的改变都会影响另外一个对象。
   深度拷贝：指源对象与拷贝对象相互独立，其中任何一个对象的改动都不会对另外一个对象造成影响。
  例如：正常函数间传值就是深度拷贝，引用属于浅拷贝。

19.Java迭代器
  1.只能单向移动，
  2.使用方法iterator要求容器返回一个Iterator。
  3.使用next来获取序列的下一个元素
  4.使用hastNext检查序列中是否还有元素
  5.使用remove来将迭代器新近返回的元素删除。